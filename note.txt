C语言程序学习笔记

一、基本知识
	C程序的基本结构：
		要点：一个C语言程序，无论其大小如何，都是由函数和变量组成的。函数中包含一些语句，以指定所要执行的计算操作；变量则用于存储计算过程中使用的值。
		示例：
		example.c：

		int added_count = 0;
		int add(int a,int b)
		｛
			added_count ++;
			return a + b;
		｝

	C语言执行的入口：
		要点：每个程序都从main函数的起点开始执行，因此每个程序都必须在某个位置包含一个main函数。main函数有6个写法（第一、二个等价，推荐第一个写法）。
		示例一：argc和argv分别为argument counter和argument vector的缩写，分别表示程序执行的参数个数和指向字符串数组的指针。
		int main(int argc, char **argv)
		{
			return 0;
		}
		示例二：
		int main(int argc, char *argv[])
		{
			return 0;
		}
		示例三：
		int main(void)
		{
			return 0;
		}
		示例四：
		int main()
		{
			return 0;
		}
		示例五：
		void main()
		{
			
		}
		示例六：
		main()
		{
			
		}
	简单标准C程序说明：
		示例：
		#include<stdio.h>

		int main(int argc, char **argv)
		{
			int a;
			int b;
			int sum;

			sum = 0;

			a = 1;
			b = 2;
			sum = a + b;

			printf("%d + %d = %d\n", a, b, sum);

			a = 4;
			b = 5;

			sum = a + b;

			printf("%d + %d = %d\n");

			return 0;
		}
		说明：
		完整的一个C程序，包含：
		（1）库函数包含，语法为：#include<库函数文件>，如#include<stdio.h>为引入标准输入输出库函数，该文件中包含了printf函数的声明。其中<>表示从系统路径包含。""为从指定路径包含。
		（2）函数定义。编写功能模块业务代码。
		函数声明：int main(int argc, char **argv)：返回类型为int，输入参数有两个，argc和argv。
		函数功能块：
		｛

		｝
		函数返回：return 0;
		return 可返回计算后有具体值的内容，如一般常量和函数指针。
		（3）使用库函数。printf(""),将字符串作为内容输出，\n为转移字符(换行)，将无法在输入表示的内容用转义方式实现。如使用无法转义的字符，则无法通过编译。
	符号常量：
		符号常量的作用是按照源文件中的名称，原封不动的替换内容。
		定义语法：#define LABLE 200 表示原始文件中的LABLE都先替换成200，在执行编译过程。
	函数说明：
		C程序中，参数采用值传递方式。即，参数传递后，在函数内部变化，不会改变参数本身的内容。引用传递的是地址。

二、基本类型
	声明语句定义了常量和变量的名字和类型。
	（1）变量名称。C语言中，名称可包含字母和数字，且第一个字符只能为字母，下划线是字母。
		下划线开头变量被用作例程名称，不建议变量名称以此开头；
		C语言区分大小写。
		按照约定俗成，变量名用小写，符号常量使用大写。
		内部名称前31个字符有效；外部名称前6个字符有效。故建议，外部变量和函数名长度控制在6个字符。
	（2）基本数据类型
		char	字符型，占一个字节，可存储本地字符集中的一个字符。通常为8位。
		int	整型，表示所用机器中整数的最大长度。通常为16位。
		float	单精度浮点型
		double	双精度浮点型
	（3）数据类型限定符
		在基本数据类型前，加入限定符，可以表示不同的含义。
		short、long 长度扩张修饰符
		signed、unsigned 符号修饰符。
		关于类型的常量范围及限定，在如下头文件中定义：limits.h和float.h。
		u或U结尾表示无符号常量。
		字符常量：
			用单引号表示一个单字符；
			存在转义字符，用\接一个字符或者1-3位的八进制或十六进制表示（\ooo），其中八进制以\0cc 表示，十六进制以\xcc或\Xcc,表示。
			C全部转义字符(13类)：
			\a	响鸣
			\b	回退符	将输入退回到前一个符位置开始输出。
			\f	换页符	开启新的一页
			\n	换行符	
			\r	回车符
			\t	横向制表符
			\v	纵向制表符
			\\	反斜杠
			\'	单引号
			\"	双引号
			\?	问号
			\ooo	八进制数
			\xhh	十六进制数

		整型常量类型：
			默认为int。
			l或L结尾为long，
			UL或ul结尾为unsigned long；
			整型可用八进制和十六进制表示。分别是以0，0x或0X开头。
		浮点型常量：
			默认为float。
			f或F为float，
			l或L为long double。
		枚举常量：
			枚举常量默认值从0开始，若制定了第一个枚举的值，则后续没有赋值的枚举以此递增。
			enum 枚举类型名称 {枚举名1, 枚举常量名2}或者enum 枚举类型名称 {枚举名1 = 2, 枚举常量名2}或enum 枚举类型名称 {枚举名1 = 2, 枚举常量名2=3}。
		变量声明：
			任何都必须先声明，表示是使用类型和方法。可以在声明的同时初始化。自动变量不初始化则为无效值。静态变量和外部变量默认初始化为0，

三、运算符	
	按照参与运算的数量，可分为三大类运算符：一元运算符、二元运算符、三元运算符。
	按照参与运算的数据类型，可分为：算术运算符、关系运算符、逻辑运算符、位运算符、赋值运算符、取值运算符。
	运算符具有两大特性：优先级、结合性。同优先级的运算符，运算规则采用对应的结合规则。优先级，从上到下，依次降低。如下：
	C语言运算符有：() [] . -> & + - * / % ! == != < > <= >= = ++ -- -= += *= /= %= && || != ~ ^ | << >> ^= != <<= >>= , &= (type) sizeof ?:
	?:为C语言中，唯一的三元运算符。
	C语言中，除了三类运算符：一元运算符、赋值（包括组合赋值运算符）、逗号运算符结合性从右至左，其他运算符都从左至右。
	其中，括号，数组索引，指针成员，结构体（包括联合体）成员运算符，优先级最高；逗号运算符优先级最低,赋值运算符优先级倒数第二。
	
	运算符								结合性						说明
	() [] -> .							从左至右
	！~ ++ -- + - * & (type) sizeof		从右至左						*：（取值一元运算符） &：（取地址一元运算符
	* % /								从左至右
	+ -									从左至右
	<< >>								从左至右
	< <= > >=							从左至右
	&									从左至右						按位与
	^									从左至右						按位异或
	|									从左至右						按位或
	&&									从左至右
	||									从左至右
	?:									从左至右						条件表达式
	== != 								从左至右
	= += -= *= /= %= ^= |= &= <<= >>=	从右至左
	,									从右至左

	类型转换：
	因为不同类型的变量参与运算，类型不一致的变量会发生转换。根据情况会发生两类转换：隐式自动转换、强制转换。
	隐式自动转换发生在长度不一致的运算之间，和发生在向函数传递实际参数时。强制转换使用： (类型)表达式，可能会发生精度截断。
	隐式自动转换比较复杂一些，分为运算对象有无unsigned类型，有入则规则：
	char,short转换为int。
	按照运算对象中有无如下类型，优先转换：long double > double > float > long。
	对于无符号类型，因为需要视机器对不同整型的大小而定。
	++ -- 前缀后缀使用的唯一区别在于，前缀使用传递的是增减后的值，后缀使用传递的是增减前的值。

四、控制流
	C程序中，语句以分号结束；程序块用{}包含。程序块中可以声明变量。
	(1)分支控制语句
	if语句：
	if（表达式）
	{

	}
	if-else语句：
	if（表达式）
	{

	}
	else
	{

	}
	if-else if-esle语句：
	if（表达式）
	{

	}
	多个”else if(表达式)
	{

	}“
	else
	{

	}
	(2)多路判定语句
	switch(表达式)
	{
		case 常量表达式1：语句；
		case 常量表达式2：语句：
		default：语句；
	}
	使用break跳出多路分支判定。
	(3)循环控制语句
	for,while,do-while。
	for(语句;判定条件;语句)
	{

	}
	while(判定条件)
	{

	}
	for，while先计算条件，在执行。
	do
	{

	}while(判定条件)；
	先执行，再判定下次条件。

	循环控制，可使用break、continue。
	break跳出最内层循环。continue跳过后续步骤，进入下一轮循环。
	(4)goto语句及跳转标号
	goto会破坏程序逻辑，造成程序难以读懂。一般不用使用，仅仅用于循环嵌套太深情况下，直接跳出最内层循环。
	跳转标号示例：error：

	









	